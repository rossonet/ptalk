buildscript {
  repositories {
    mavenCentral()
    jcenter()
    gradlePluginPortal()
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath "com.gorylenko.gradle-git-properties:gradle-git-properties:2.4.0"
    classpath 'de.undercouch:gradle-download-task:5.4.0'
  }
}

plugins {
  id "com.google.protobuf" version "0.9.2"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: "com.gorylenko.gradle-git-properties"
apply plugin: 'base'
apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: 'java-library'
apply plugin: 'distribution'
apply plugin: 'jacoco'

description = "Ptalk NLU API"
group = rootProject.group
version = rootProject.version

def grpcVersion = '1.54.0'
def protobufVersion = '3.21.7'
def protocVersion = protobufVersion

ext {
  sourceCompatibility = 1.8
  packageName = 'ptalk-nlu-api'
}

repositories {
  mavenCentral()
  jcenter()
}

dependencies {
  api group: 'net.rossonet.commons', name: 'rossonet-helper', version: '0.3.1'
  api "io.grpc:grpc-protobuf:${grpcVersion}"
  api "io.grpc:grpc-stub:${grpcVersion}"
  compileOnly "org.apache.tomcat:annotations-api:6.0.53"
  api "com.google.protobuf:protobuf-java-util:${protobufVersion}"
  api "io.grpc:grpc-netty-shaded:${grpcVersion}"
  api group: 'org.json', name: 'json', version: '20230227'
  api 'com.opencsv:opencsv:5.7.1'
  testImplementation "io.grpc:grpc-testing:${grpcVersion}"
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
  testImplementation group: 'com.ginsberg', name: 'junit5-system-exit', version: '1.1.2'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

test {
  useJUnitPlatform()
}

eclipse {
  classpath {
    downloadJavadoc = true
    downloadSources = true
  }
}

task eclipseClosedDependencies {}

task eclipseClosedDependencies_ {}

java {
  withJavadocJar()
  withSourcesJar()
}

publishing {
  publications {
    mavenJava(MavenPublication){
      artifactId = "${project.name}"
      from components.java
      versionMapping {
        usage('java-api') {
          fromResolutionOf('runtimeClasspath')
        }
        usage('java-runtime') {
          fromResolutionResult()
        }
      }
      pom {
        name = "${project.name}"
        description = "${project.description}"
        url = 'https://app.rossonet.net/'
        licenses {
          license {
            name = 'Apache-2.0 license'
            url = 'https://www.apache.org/licenses/LICENSE-2.0'
          }
        }
        developers {
          developer {
            id = 'ar4k'
            name = 'Andrea Ambrosini'
            email = 'andrea.ambrosini@rossonet.org'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/rossonet/ptalk.git'
          developerConnection = 'scm:git:ssh://github.com:rossonet/ptalk.git'
          url = 'https://github.com/rossonet/ptalk/tree/master'
        }
      }
    }
  }
  repositories {
    maven {
      url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      name = "sonatype"
      credentials {
        username "rossonet"
        password "${ossrhPassword}"
      }
    }
  }
}


signing {
    sign publishing.publications.mavenJava
}

gitProperties {
  failOnNoGitDirectory = false
  customProperty 'component', "${project.name}"
  customProperty 'version', "${version}"
  dateFormat = "yyyy-MM-dd HH:mm:ssZ"
  dateFormatTimeZone = 'GMT'
}

jacocoTestReport {
  reports {
    xml.enabled true
    html.enabled false
  }
}

javadoc{
  destinationDir = file("${rootProject.buildDir}/docs/javadoc/${project.name}/")
  failOnError=true
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:${protocVersion}"
    generatedFilesBaseDir = "$projectDir/src"
  }
  plugins {
    grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
  }
  generateProtoTasks {
    all().each { task ->
      task.group = 'GRPC ProtoBuf'
      task.plugins {
        grpc {
          outputSubDir = 'java'
        }
      }
    }
  }
}

compileJava {
  doFirst {
    delete fileTree(projectDir) { include 'build/generated/source/proto/main/java/net/rossonet/ptalk/*/grpc/*.java' }
  }
}

gradle.taskGraph.beforeTask { Task task ->
//  println "$task completed, now delete the java classes generated by protoc in build directory."
  delete fileTree(projectDir) { include 'build/generated/source/proto/main/java/net/rossonet/ptalk/*/grpc/*.java' }
  delete fileTree(projectDir) { include 'build/extracted-include-protos/**/*.proto' }
}

clean {
//  println("starting clean in ${projectDir}")
  delete fileTree(projectDir) { include 'src/main/java/net/rossonet/ptalk/*/grpc/*.java' }
}   

